{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport axios from \"axios\";\nfunction useFlip() {\n  _s();\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => setIsFacingUp(isUp => !isUp);\n  return [isFacingUp, flipCard];\n}\n_s(useFlip, \"MAa1uxaU8Uj1WEqjPNN6CqCOgcw=\");\nfunction useAxios(url) {\n  _s2();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log(url);\n        const response = await axios.get(url);\n        const newData = response.data;\n        setData(prevData => [...prevData, {\n          ...newData,\n          id: uuid()\n        }]);\n      } catch (error) {\n        console.error('Error fetching data: ', error);\n      }\n    };\n\n    // Check if data is already present to avoid fetching on initial render\n    if (data.length === 0) {\n      fetchData();\n    }\n    return () => {};\n  }, [url, data, setData]);\n\n  // const addData = (newData) => setData((prevData) => [...prevData, { ...newData, id: uuid() }]);\n\n  return [data, useAxios];\n}\n_s2(useAxios, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\nconst usePokemonList = () => {\n  _s3();\n  const [pokemonList, setPokemonList] = useState([]);\n  const fetchAndCopyPokemonNames = async () => {\n    try {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=1025');\n      const pokemonData = response.data.results;\n      const names = pokemonData.map(pokemon => pokemon.name).sort();\n      setPokemonList(names);\n    } catch (error) {\n      console.error('Error fetching Pokemon data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchAndCopyPokemonNames();\n  }, []);\n  return pokemonList;\n};\n_s3(usePokemonList, \"8WCeILIBbUks4eWUNugK57Uz8MA=\");\nexport { useFlip, useAxios, usePokemonList };","map":{"version":3,"names":["useState","useEffect","v4","uuid","axios","useFlip","_s","isFacingUp","setIsFacingUp","flipCard","isUp","useAxios","url","_s2","data","setData","fetchData","console","log","response","get","newData","prevData","id","error","length","usePokemonList","_s3","pokemonList","setPokemonList","fetchAndCopyPokemonNames","pokemonData","results","names","map","pokemon","name","sort"],"sources":["/home/corey/Springboard/React/cards-pokemon/src/Hooks.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport {v4 as uuid} from \"uuid\";\nimport axios from \"axios\";\n\nfunction useFlip() {\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => setIsFacingUp(isUp => !isUp);\n  return [isFacingUp, flipCard];\n}\n\nfunction useAxios(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log(url);\n        const response = await axios.get(url);\n        const newData = response.data;\n        setData((prevData) => [...prevData, { ...newData, id: uuid() }]);\n      } catch (error) {\n        console.error('Error fetching data: ', error);\n      }\n    };\n\n    // Check if data is already present to avoid fetching on initial render\n    if (data.length === 0) {\n      fetchData();\n    }\n\n    return () => {};\n  }, [url, data, setData]);\n\n  // const addData = (newData) => setData((prevData) => [...prevData, { ...newData, id: uuid() }]);\n  \n  return [data, useAxios];\n}\n\n\nconst usePokemonList = () => {\n  const [pokemonList, setPokemonList] = useState([]);\n\n  const fetchAndCopyPokemonNames = async () => {\n    try {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=1025');\n      const pokemonData = response.data.results;\n      const names = pokemonData.map(pokemon => pokemon.name).sort();\n      setPokemonList(names);\n    } catch (error) {\n      console.error('Error fetching Pokemon data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchAndCopyPokemonNames();\n  }, []);\n\n  return pokemonList;\n};\n\nexport { useFlip, useAxios, usePokemonList};"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAAQC,EAAE,IAAIC,IAAI,QAAO,MAAM;AAC/B,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMS,QAAQ,GAAGA,CAAA,KAAMD,aAAa,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;EACnD,OAAO,CAACH,UAAU,EAAEE,QAAQ,CAAC;AAC/B;AAACH,EAAA,CAJQD,OAAO;AAMhB,SAASM,QAAQA,CAACC,GAAG,EAAE;EAAAC,GAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFC,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;QAChB,MAAMO,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACR,GAAG,CAAC;QACrC,MAAMS,OAAO,GAAGF,QAAQ,CAACL,IAAI;QAC7BC,OAAO,CAAEO,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE;UAAE,GAAGD,OAAO;UAAEE,EAAE,EAAEpB,IAAI,CAAC;QAAE,CAAC,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,IAAIV,IAAI,CAACW,MAAM,KAAK,CAAC,EAAE;MACrBT,SAAS,CAAC,CAAC;IACb;IAEA,OAAO,MAAM,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,GAAG,EAAEE,IAAI,EAAEC,OAAO,CAAC,CAAC;;EAExB;;EAEA,OAAO,CAACD,IAAI,EAAEH,QAAQ,CAAC;AACzB;AAACE,GAAA,CA1BQF,QAAQ;AA6BjB,MAAMe,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAM8B,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,8CAA8C,CAAC;MAChF,MAAMW,WAAW,GAAGZ,QAAQ,CAACL,IAAI,CAACkB,OAAO;MACzC,MAAMC,KAAK,GAAGF,WAAW,CAACG,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC;MAC7DR,cAAc,CAACI,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd6B,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,WAAW;AACpB,CAAC;AAACD,GAAA,CAnBID,cAAc;AAqBpB,SAASrB,OAAO,EAAEM,QAAQ,EAAEe,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}
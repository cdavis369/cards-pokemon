{"ast":null,"code":"var _jsxFileName = \"/home/corey/Springboard/React/cards-pokemon/src/PlayingCardList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { v1 as uuid } from \"uuid\";\nimport PlayingCard from \"./PlayingCard\";\nimport \"./PlayingCardList.css\";\nimport { useAxios } from \"./Hooks\";\n\n/* Renders a list of playing cards.\n * Can also add a new card at random. */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardTable() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [response, setResponse] = useAxios();\n  setCards(cards => [...cards, {\n    ...response.data,\n    id: uuid()\n  }]);\n  // const addCard = async () => {\n  //   const response = await axios.get(\n  //     \"https://deckofcardsapi.com/api/deck/new/draw/\"\n  //   );\n  //   setCards(cards => [...cards, { ...response.data, id: uuid() }]);\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PlayingCardList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Pick a card, any card!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setResponse,\n        children: \"Add a playing card!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PlayingCardList-card-area\",\n      children: cards.map(cardData => /*#__PURE__*/_jsxDEV(PlayingCard, {\n        front: cardData.cards[0].image\n      }, cardData.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(CardTable, \"2tAry6dVr31pzHQ9jaDESCRhI2Y=\", false, function () {\n  return [useAxios];\n});\n_c = CardTable;\nCardTable.defaultProps = {};\nexport default CardTable;\nvar _c;\n$RefreshReg$(_c, \"CardTable\");","map":{"version":3,"names":["React","useState","v1","uuid","PlayingCard","useAxios","jsxDEV","_jsxDEV","CardTable","_s","cards","setCards","response","setResponse","data","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","cardData","front","image","_c","defaultProps","$RefreshReg$"],"sources":["/home/corey/Springboard/React/cards-pokemon/src/PlayingCardList.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {v1 as uuid} from \"uuid\";\nimport PlayingCard from \"./PlayingCard\";\nimport \"./PlayingCardList.css\";\nimport { useAxios } from \"./Hooks\";\n\n/* Renders a list of playing cards.\n * Can also add a new card at random. */\nfunction CardTable() {\n  const [cards, setCards] = useState([]);\n  const [response, setResponse] = useAxios();\n  setCards(cards => [...cards, { ...response.data, id: uuid() }]);\n  // const addCard = async () => {\n  //   const response = await axios.get(\n  //     \"https://deckofcardsapi.com/api/deck/new/draw/\"\n  //   );\n  //   setCards(cards => [...cards, { ...response.data, id: uuid() }]);\n  // };\n  return (\n    <div className=\"PlayingCardList\">\n      <h3>Pick a card, any card!</h3>\n      <div>\n        <button onClick={setResponse}>Add a playing card!</button>\n      </div>\n      <div className=\"PlayingCardList-card-area\">\n        {cards.map(cardData => (\n          <PlayingCard key={cardData.id} front={cardData.cards[0].image} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nCardTable.defaultProps = {};\n\nexport default CardTable;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAQC,EAAE,IAAIC,IAAI,QAAO,MAAM;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,uBAAuB;AAC9B,SAASC,QAAQ,QAAQ,SAAS;;AAElC;AACA;AADA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC1CM,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAK,EAAE;IAAE,GAAGE,QAAQ,CAACE,IAAI;IAAEC,EAAE,EAAEZ,IAAI,CAAC;EAAE,CAAC,CAAC,CAAC;EAC/D;EACA;EACA;EACA;EACA;EACA;EACA,oBACEI,OAAA;IAAKS,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BV,OAAA;MAAAU,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/Bd,OAAA;MAAAU,QAAA,eACEV,OAAA;QAAQe,OAAO,EAAET,WAAY;QAAAI,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eACNd,OAAA;MAAKS,SAAS,EAAC,2BAA2B;MAAAC,QAAA,EACvCP,KAAK,CAACa,GAAG,CAACC,QAAQ,iBACjBjB,OAAA,CAACH,WAAW;QAAmBqB,KAAK,EAAED,QAAQ,CAACd,KAAK,CAAC,CAAC,CAAC,CAACgB;MAAM,GAA5CF,QAAQ,CAACT,EAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CACjE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACZ,EAAA,CAvBQD,SAAS;EAAA,QAEgBH,QAAQ;AAAA;AAAAsB,EAAA,GAFjCnB,SAAS;AAyBlBA,SAAS,CAACoB,YAAY,GAAG,CAAC,CAAC;AAE3B,eAAepB,SAAS;AAAC,IAAAmB,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}